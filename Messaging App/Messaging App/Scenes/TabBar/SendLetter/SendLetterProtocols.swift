//
//  SendLetterProtocols.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 11.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import UIKit

// MARK: - View Controller

protocol SendLetterViewControllerProtocol: BaseViewControllerProtocol {
    
}

protocol SelectStampViewControllerProtocol: BaseViewControllerProtocol {
    
}

protocol SelectPaperViewControllerProtocol: BaseViewControllerProtocol {
    
}

protocol WriteViewControllerProtocol: BaseViewControllerProtocol {
    
    func complateWriting()
}

protocol PersonSelectViewControllerProtocol: BaseViewControllerProtocol {
    
    func showMatchingUsers(result: [PersonModel])
    func completeUserSelection()
}

protocol SelectSendTypeViewControllerProtocol: BaseViewControllerProtocol {
    
    func setArrivelTimeText(_ texts: (String, String, String, String))
    func completeSendLetter()
}


// MARK: - Presenter

protocol SendLetterPresenterViewProtocol: BasePresenterViewProtocol {

    var sendLetterViewController: SendLetterViewControllerProtocol! { get set }
    var selectStampViewController: SelectStampViewControllerProtocol! { get set }
    var selectPaperViewController: SelectPaperViewControllerProtocol! { get set }
    var writeViewController: WriteViewControllerProtocol! { get set }
    var personSelectViewController: PersonSelectViewControllerProtocol! { get set }
    var selectSendTypeViewController: SelectSendTypeViewControllerProtocol! { get set }
//    var viewController: BaseViewControllerProtocol { get set }
    
    var envelopeType: EnvelopeType? { get set }
    var stampType: StampType?  { get set }
    var paperType: PaperType?  { get set }
    var user: PersonModel?  { get set }
    var sendNow: Bool { get set }
    
    func setContentAndNext(content: String)
    func searchUsers(searchText: String)
    func setUserAndNext(user: PersonModel?)
    func getArrivalTime()
    func sendLetter(sendType: SendType)
}

protocol SendLetterPresenterInteractorProtocol: BasePresenterInteractorProtocol {
    
    func presentUsers(result: [PersonModel])
    func completeSendLetter()
    func showErrorSendView(errorModel: ErrorModel)
    func showErrorPersonView(errorModel: ErrorModel)
}

protocol SendLetterPresenterDelegateProtocol: BasePresenterDelegateProtocol {
   
}

// MARK: - Interactor

protocol SendLetterInteractorProtocol: BaseInteractorProtocol {
    
    func fetchUsers(searchText: String)
    func sendLetter(userId: Int, envelopeType: EnvelopeType, stampType: StampType, paperType: PaperType, letterContent: String, sendType: SendType)
}
