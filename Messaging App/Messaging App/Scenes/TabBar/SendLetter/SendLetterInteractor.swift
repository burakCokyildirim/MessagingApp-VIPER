//
//  SendLetterInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 11.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import Foundation

class SendLetterInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: SendLetterPresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension SendLetterInteractor: SendLetterInteractorProtocol {
    
    func fetchUsers(searchText: String) {
        
        let parameters:[String: Any] = ["SearchText": searchText]
        let headers = NetworkConstants.contentType
        
        networkService.postJSON(url: NetworkConstants.findUser, parameters: parameters, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.showErrorPersonView(errorModel: ErrorModel.default)
                return
            }
            
            switch statusCode {
            case 0:
                var matchingUsers: [PersonModel] = []
                if let jsonArray = json["data"].array {
                    jsonArray.forEach { (user) in
                        matchingUsers.append(PersonModel(json: user))
                    }
                }
                self.presenter.presentUsers(result: matchingUsers)
            default:
                self.presenter.showErrorPersonView(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.showErrorPersonView(errorModel: errorModel)
        }
    }
    
    func sendLetter(userId: Int, envelopeType: EnvelopeType, stampType: StampType, paperType: PaperType, letterContent: String, sendType: SendType) {
        
        let parameters = SendLetterParameter()
        parameters.toUserId = userId
        parameters.envelopeType = envelopeType.value
        parameters.stampType = stampType.value
        parameters.paperType = paperType.value
        parameters.sendType = sendType.value
        parameters.letterContent = letterContent
        
        let headers = NetworkConstants.contentType
        let parametersJSON = parameters.toDictionary()
        
        networkService.postJSON(url: NetworkConstants.sendLetter, parameters: parametersJSON, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.showErrorSendView(errorModel: ErrorModel.default)
                return
            }
            
            switch statusCode {
                case 0:
                    self.presenter.completeSendLetter()
                default:
                    self.presenter.showErrorSendView(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.showErrorSendView(errorModel: Errors.somethingsWrong)
        }
    }
}
