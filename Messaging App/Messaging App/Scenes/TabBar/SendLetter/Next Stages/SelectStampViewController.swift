//
//  SelectStampViewController.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 15.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit

class SelectStampViewController: BaseViewController {
    
    // MARK: - Outlets
    @IBOutlet var collectionView: UICollectionView!
    
    // MARK: - Dependencies
    
    var presenter: SendLetterPresenterViewProtocol!
    
    // MARK: - Properties
    
    var selectedStamp = StampType.stampType1
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        
        barTitle = "select_your_stamp".localized
        
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "ImageCell", bundle: nil), forCellWithReuseIdentifier: "imageCell")
    }
    
    // MARK: - Initialization
    
    // MARK: - Actions
    
    @IBAction func nextButtonTapped(_ sender: Any) {
        
        presenter.stampType = selectedStamp
        
        let nextController: PreviewViewController = UIStoryboard.sendLetter.instantiateViewController()
        nextController.presenter = presenter
        
        navigationController?.pushViewController(nextController, animated: false)
    }
    
    @IBAction func backButtonTapped(_ sender: Any) {
        self.leftTapped()
    }
}

// MARK: - Extensions

extension SelectStampViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 15
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "imageCell", for: indexPath) as! ImageCell
        
        cell.image.frame.size.width = collectionView.frame.width * 0.29
        switch indexPath.row {
        case 0, 1, 2, 6, 7, 8, 12, 13, 14:
            cell.image.frame.size.height = collectionView.frame.width * 0.395
        case 3, 4, 5, 9, 10, 11:
            cell.image.frame.size.height = collectionView.frame.width * 0.215
        default:
            break;
        }
        cell.image.image = UIImage(named: "stamp\(indexPath.row + 1)")
        
        cell.isSelected = indexPath.row == selectedStamp.index
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        let threeCellHeight = collectionView.frame.width * 1.005
        if threeCellHeight > collectionView.frame.height {
            return collectionView.frame.width * 0.014
        }
        return (collectionView.frame.height - threeCellHeight) / 3
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return collectionView.frame.width * 0.013
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        var size = CGSize()
        
        switch indexPath.row {
        case 0, 1, 2, 6, 7, 8, 12, 13, 14:
            size = CGSize(width: collectionView.frame.width * 0.29, height: collectionView.frame.width * 0.395)
        case 3, 4, 5, 9, 10, 11:
            size = CGSize(width: collectionView.frame.width * 0.29, height: collectionView.frame.width * 0.215)
        default:
            break;
        }
        return size
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedStamp = StampType(rawValue: indexPath.row + 1) ?? selectedStamp
        
        (collectionView.visibleCells as! [ImageCell]).forEach { (cell) in
            cell.isSelected = indexPath == collectionView.indexPath(for: cell)!
        }
//        collectionView.reloadItems(at: collectionView.indexPathsForVisibleItems)
//        collectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
    }
}

// MARK: - Protocol Implemantations

extension SelectStampViewController: SelectStampViewControllerProtocol {
    
}
