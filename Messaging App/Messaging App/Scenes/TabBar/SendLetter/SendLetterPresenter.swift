//
//  SendLetterPresenter.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 11.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import Foundation

class SendLetterPresenter: BasePresenter {
    
    // MARK: - Dependencies
    
    var sendLetterViewController: SendLetterViewControllerProtocol!
    var selectStampViewController: SelectStampViewControllerProtocol!
    var selectPaperViewController: SelectPaperViewControllerProtocol!
    var writeViewController: WriteViewControllerProtocol!
    var personSelectViewController: PersonSelectViewControllerProtocol!
    var selectSendTypeViewController: SelectSendTypeViewControllerProtocol!
    
    fileprivate var interactor: SendLetterInteractorProtocol!
    fileprivate var delegate: SendLetterPresenterDelegateProtocol?
    
    // MARK: - Extras
    
    // MARK: - Properties
    
    var envelopeType: EnvelopeType?
    var stampType: StampType?
    var paperType: PaperType?
    var letterContent: String?
    var user: PersonModel?
    var sendType: SendType?
    
    var sendNow = false
    
    // MARK: - Initialization
    
    init(viewController: SendLetterViewControllerProtocol, interactor: SendLetterInteractorProtocol, delegate: SendLetterPresenterDelegateProtocol?, extras: Any?) {
        self.sendLetterViewController = viewController
        self.interactor = interactor
        self.delegate = delegate
        
        // Store extras
    }
    
    // MARK: - Business Logic
}

// MARK: - Extensions

// MARK: - Protocols Implemantations

// MARK: View Protocol

extension SendLetterPresenter: SendLetterPresenterViewProtocol {
    
    func setContentAndNext(content: String) {
        if content.isEmpty {
            writeViewController.showValidationError(errorMessage:
                "warning_empty_letter_content".localized)
            return
        }
        self.letterContent = content.censored()
        writeViewController.complateWriting()
    }
    
    func searchUsers(searchText: String) {
        interactor.fetchUsers(searchText: searchText)
    }
    
    func setUserAndNext(user: PersonModel?) {
        if user == nil {
            personSelectViewController.showValidationError(errorMessage:
                "warning_not_select_user".localized)
            return
        }
        
        self.user = user
        personSelectViewController.completeUserSelection()
    }
    
    func getArrivalTime() {
        guard let user = user else { return }
        
        guard let totalSeconds = (user.s1ArrivalTime, user.s2ArrivalTime, user.s3ArrivalTime, user.s4ArrivalTime)
            as? (Double, Double, Double, Double) else { return }
        
        let sendType1Text = "\(String(format: "format_day".localized, Int(totalSeconds.0 / 86400)))"
            + " \(String(format: "format_hour".localized, Int(totalSeconds.0 / 3600) % 24))"
            + " \(String(format: "format_minute".localized, Int(totalSeconds.0 / 60) % 60))"
        
        let sendType2Text = "\(String(format: "format_day".localized, Int(totalSeconds.1 / 86400)))"
                + " \(String(format: "format_hour".localized, Int(totalSeconds.1 / 3600) % 24))"
                + " \(String(format: "format_minute".localized, Int(totalSeconds.1 / 60) % 60))"
        
        let sendType3Text = "\(String(format: "format_day".localized, Int(totalSeconds.2 / 86400)))"
                + " \(String(format: "format_hour".localized, Int(totalSeconds.2 / 3600) % 24))"
                + " \(String(format: "format_minute".localized, Int(totalSeconds.2 / 60) % 60))"
        
        let sendType4Text = "\(String(format: "format_day".localized, Int(totalSeconds.3 / 86400)))"
                + " \(String(format: "format_hour".localized, Int(totalSeconds.3 / 3600) % 24))"
                + " \(String(format: "format_minute".localized, Int(totalSeconds.3 / 60) % 60))"
        
        selectSendTypeViewController.setArrivelTimeText((sendType1Text, sendType2Text, sendType3Text, sendType4Text))
    }
    
    func sendLetter(sendType: SendType) {
        self.sendType = sendType
        
        guard
            let envelopeType = envelopeType,
            let stampType = stampType,
            let paperType = paperType,
            let letterContent = letterContent,
            let user = user,
            let sendType = self.sendType
            else {
                selectSendTypeViewController.showValidationError(errorMessage:
                    "error_message.somethings_wrong".localized)
                return
        }
        
        selectSendTypeViewController.startProgress()
        interactor.sendLetter(userId: user.userID, envelopeType: envelopeType,
                              stampType: stampType, paperType: paperType,
                              letterContent: letterContent, sendType: sendType)
    }
}

// MARK: Interactor Protocol

extension SendLetterPresenter: SendLetterPresenterInteractorProtocol {
    func showErrorSendView(errorModel: ErrorModel) {
        selectSendTypeViewController.stopProgress()
        if handleError(errorModel: errorModel, viewController: selectSendTypeViewController) {
            selectSendTypeViewController.showError(errorModel: errorModel)
        }
    }
    
    func showErrorPersonView(errorModel: ErrorModel) {
        personSelectViewController.stopProgress()
        if handleError(errorModel: errorModel, viewController: personSelectViewController) {
            personSelectViewController.showError(errorModel: errorModel)
        }
    }
    
    
    func presentUsers(result: [PersonModel]) {
        personSelectViewController.showMatchingUsers(result: result)
    }
    
    func completeSendLetter() {
        selectSendTypeViewController.stopProgress()
        selectSendTypeViewController.completeSendLetter()
        sendNow = true
    }
}

// MARK: Delegate Protocol

