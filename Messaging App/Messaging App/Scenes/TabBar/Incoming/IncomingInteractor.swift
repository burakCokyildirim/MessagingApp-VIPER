//
//  IncomingInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 11.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import Foundation

class IncomingInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: IncomingPresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension IncomingInteractor: IncomingInteractorProtocol {
    
    func fetchLetters() {
        networkService.getJSON(url: NetworkConstants.didComeLetter, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
                   
            switch statusCode {
            case 0:
                let letters = json["data"]["letters"].arrayValue.map { LetterModel(json: $0)}
                let incomingCount = json["data"]["incoming_letters_count"].intValue
                let outgoingCount = json["data"]["outgoing_letters_count"].intValue
                self.presenter.presentLetters(letters, incomingCount, outgoingCount)
                break
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func blockUser(letterId: String) {
        
        let headers = NetworkConstants.contentType
        let parameters = ["blocked_user_id": letterId as Any]
        
        networkService.postJSON(url: NetworkConstants.blockUser, parameters: parameters, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
                   
            switch statusCode {
            case 0:
                self.presenter.notifyBlockSuccess()
                break
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func reportUser(letterId: String) {
        
        let headers = NetworkConstants.contentType
        let parameters = ["letter_id": letterId as Any,
                          "description": "empty" as Any]
        
        networkService.postJSON(url: NetworkConstants.reportUser, parameters: parameters, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
                   
            switch statusCode {
            case 0:
                self.presenter.notifyReportSuccess()
                break
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
}
