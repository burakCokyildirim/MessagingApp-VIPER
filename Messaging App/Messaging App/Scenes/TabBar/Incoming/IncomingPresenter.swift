//
//  IncomingPresenter.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 11.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import Foundation

class IncomingPresenter: BasePresenter {
    
    // MARK: - Dependencies
    
    fileprivate var viewController: IncomingViewControllerProtocol!
    fileprivate var interactor: IncomingInteractorProtocol!
    fileprivate var delegate: IncomingPresenterDelegateProtocol?
    
    // MARK: - Extras
    
    // MARK: - Properties
    
    // MARK: - Initialization
    
    init(viewController: IncomingViewControllerProtocol, interactor: IncomingInteractorProtocol, delegate: IncomingPresenterDelegateProtocol?, extras: Any?) {
        self.viewController = viewController
        self.interactor = interactor
        self.delegate = delegate
        
        // Store extras
    }
    
    // MARK: - Business Logic
    
    // MARK: - Override
    
    override func handleAndShowError(errorModel: ErrorModel) {
        viewController.stopProgress()
        if handleError(errorModel: errorModel, viewController: viewController) {
            viewController.showError(errorModel: errorModel)
        }
    }
}

// MARK: - Extensions

// MARK: - Protocols Implemantations

// MARK: View Protocol

extension IncomingPresenter: IncomingPresenterViewProtocol {
    
    func fetchLetters() {
        viewController.startLoading()
        interactor.fetchLetters()
    }
    
    func blockUser(letterId: String) {
        viewController.startLoading()
        interactor.blockUser(letterId: letterId)
    }
    
    func reportUser(letterId: String) {
        viewController.startLoading()
        interactor.reportUser(letterId: letterId)
    }
}

// MARK: Interactor Protocol

extension IncomingPresenter: IncomingPresenterInteractorProtocol {
    
    func presentLetters(_ letters: [LetterModel], _ incomingCount: Int, _ outgoingCount: Int) {
        viewController.stopLoading()
        viewController.showLetters(letters, incomingCount, outgoingCount)
    }
    
    func notifyBlockSuccess() {
        viewController.stopLoading()
        viewController.notifyBlockSuccess()
    }
    
    func notifyReportSuccess() {
        viewController.stopLoading()
        viewController.notifyReportSuccess()
    }
}

// MARK: Delegate Protocol

