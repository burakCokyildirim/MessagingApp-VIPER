//
//  FollowOutgoingViewController.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 4.05.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit

class FollowOutgoingViewController: BaseViewController {
    
    // MARK: - Outlets
    
    @IBOutlet weak var profilePicture: UIImageView!
    @IBOutlet weak var username: UILabel!
    @IBOutlet weak var addressDesc: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    
    // MARK: - Dependencies
    
    var presenter: FollowOutgoingPresenterViewProtocol!
    
    // MARK: - Properties
    
    var letters: [LetterModel] = []
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        presenter.fetchLetters()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        navigationController?.popViewController(animated: false)
        
        if let user = MessagingAppGlobal.shared.userModel {
            if let pictureURL = user.profilePicture {
                profilePicture.setImage(url: pictureURL)
            }
            profilePicture.makeRounded()
        }
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        
        barTitle = "letters_to_be_transmitted".localized
        
        if let user = MessagingAppGlobal.shared.userModel {
            username.text = user.firstName + " " + user.lastName
            addressDesc.text = user.address.description
            if let pictureURL = user.profilePicture {
                profilePicture.setImage(url: pictureURL)
            }
            profilePicture.makeRounded()
        }
        
        collectionView.register(UINib(nibName: "LetterCell4", bundle: nil), forCellWithReuseIdentifier: "letterCell4")
        if let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            layout.estimatedItemSize = CGSize(width: 1, height: 1)
        }
        collectionView.reloadData()
    }
    
    // MARK: - Initialization
    
    // MARK: - Actions
    
}

// MARK: - Extensions

extension FollowOutgoingViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return letters.count + 2
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "letterCell4", for: indexPath)
        
        if let cell = cell as? LetterCell4 {
            cell.setWidthConstraint(width: collectionView.frame.width * 0.48)
        
            if letters.count - 1 < indexPath.row {
                cell.isHidden = true
                return cell
            }
            cell.isHidden = false
            
            let letter = letters[indexPath.row]
            cell.toUsername.text = letter.firstName + " " + letter.lastName
            cell.setRemainingTime(deliveryTime: letter.deliveryTime)
            cell.delegate = self
            cell.letterID = letter.id
        }
        
        return cell
    }
}

extension FollowOutgoingViewController: RevertLetterAction {
    
    func revertLetter(letterID: Int) {
        showPopupYesNo(title: "warning".localized, message: "message_text.revert_letter".localized) { (closeType) in
            switch closeType {
            case .yes:
                self.presenter.revertLetter(letterID)
            default:
                break
            }
        }
    }
}

// MARK: - Protocol Implemantations

extension FollowOutgoingViewController: FollowOutgoingViewControllerProtocol {
    
    func showLetters(_ letters: [LetterModel]) {
        self.letters = letters
        self.collectionView.reloadData()
    }
}
