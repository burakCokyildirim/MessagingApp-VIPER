//
//  ConfirmationCodeInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 8.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import Foundation

class ConfirmationCodeInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: ConfirmationCodePresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension ConfirmationCodeInteractor: ConfirmationCodeInteractorProtocol {
    
    func callConfirmation(confirmationCode: String, phoneNumber: String) {
        
        let parameters = ConfirmationCodeParameter()
        parameters.phone = phoneNumber
        parameters.code = confirmationCode
        
        let headers = NetworkConstants.contentType
        let parametersJSON = parameters.toDictionary()
        
        networkService.postJSON(url: NetworkConstants.phoneVerify, parameters: parametersJSON, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
            
            switch statusCode {
            case 0:
                self.presenter.presentAddressSelection()
            case 1:
                self.presenter.handleAndShowError(errorModel: Errors.wrongCode)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func sendSMS(phoneNumber: String, countryCode: String) {
        
        let headers = NetworkConstants.contentType
        let parameters: [String: Any] = ["phoneNumber": phoneNumber as Any,
                                         "countryCode": countryCode as Any]
        
        
        networkService.postJSON(url: NetworkConstants.sendSms, parameters: parameters, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
            
            switch statusCode {
            case 0:
                self.presenter.presentVerification()
            case 1:
                self.presenter.handleAndShowError(errorModel: Errors.phoneInUse)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func updateAddressInformation(address: AddressModel) {
        let headers = NetworkConstants.contentType
        let parameters: [String: Any] = [
            "addressDescription": address.description as Any,
            "lat": address.lat as Any,
            "lng": address.lng as Any]
        
        networkService.postJSON(url: NetworkConstants.updateAddress, parameters: parameters, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
            
            switch statusCode {
            case 0:
                let loginModel = LoginModel(json: json["data"])
                MessagingAppGlobal.shared.userModel = loginModel.userModel
                self.presenter.presentHomeScreen()
            case 1:
                self.presenter.handleAndShowError(errorModel: Errors.wrongCode)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
}
