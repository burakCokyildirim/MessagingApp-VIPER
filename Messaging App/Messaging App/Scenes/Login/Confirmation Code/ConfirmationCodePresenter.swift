//
//  ConfirmationCodePresenter.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 8.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import Foundation

class ConfirmationCodePresenter: BasePresenter {
    
    // MARK: - Dependencies
    
    fileprivate var viewController: ConfirmationCodeViewControllerProtocol!
    fileprivate var interactor: ConfirmationCodeInteractorProtocol!
    fileprivate var delegate: ConfirmationCodePresenterDelegateProtocol?
    
    // MARK: - Extras

    var state: ConfirmationViewState! = .step1 {
        didSet {
            setConfirmationVeriables()
        }
    }
    
    // MARK: - Properties
    
    let codeFieldLimit = 5
    var phoneNumber = ""
    var countryCode: UInt64 = 0
    var address: AddressModel!
    
    // MARK: - Initialization
    
    init(viewController: ConfirmationCodeViewControllerProtocol, interactor: ConfirmationCodeInteractorProtocol, delegate: ConfirmationCodePresenterDelegateProtocol?, extras: Any?) {
        self.viewController = viewController
        self.interactor = interactor
        self.delegate = delegate
        
        // Store extras
        state = extras as? ConfirmationViewState
    }
    
    // MARK: - Business Logic
    
    func setConfirmationVeriables() {
        switch state {
        case .step1:
            self.phoneNumber = ""
        case .step2(let phoneNumber, let countryCode):
            self.phoneNumber = phoneNumber
            self.countryCode = countryCode
            self.sendVerificationCode()
        default:
            break
        }
    }
    
    // MARK: - Override
    
    override func handleAndShowError(errorModel: ErrorModel) {
        viewController.stopProgress()
        if handleError(errorModel: errorModel, viewController: viewController) {
            viewController.showError(errorModel: errorModel)
        }
    }
}

// MARK: - Extensions

// MARK: - Protocols Implemantations

// MARK: View Protocol

extension ConfirmationCodePresenter: ConfirmationCodePresenterViewProtocol {
    
    var bodyLabelText: String {
        get {
            guard
                let phoneNumber = Double(self.phoneNumber) else { return "failed" }
            
            let countryCode = self.countryCode
            
            return String(format: "confirmation_code.check_sms_text".localized, countryCode, phoneNumber)
        }
    }
     
    func sendVerificationCode() {
        
        if phoneNumber.isEmpty {
            viewController.showValidationError(errorMessage:
                "warning_empty_phoneNumber".localized)
            return
        }
                
        viewController.startProgress()
        interactor.sendSMS(phoneNumber: phoneNumber, countryCode: String(countryCode))
    }
    
    func confirmCode(confirmationCode: String) {
        if confirmationCode.count < codeFieldLimit {
            viewController.showValidationError(errorMessage: String(format: "warning_empty_confirmation_code".localized, codeFieldLimit))
            return
        }
        
        viewController.startProgress()
        interactor.callConfirmation(confirmationCode: confirmationCode, phoneNumber: phoneNumber)
    }
    
    func updateAddressInformation(address: AddressModel) {
        
        self.address = address
        
        viewController.startProgress()
        interactor.updateAddressInformation(address: address)
    }
}

// MARK: Interactor Protocol

extension ConfirmationCodePresenter: ConfirmationCodePresenterInteractorProtocol {
    
    func presentVerification() {
        viewController.stopProgress()
        viewController.showVerification()
    }
    
    func presentAddressSelection() {
        viewController.stopProgress()
        viewController.showAddressSelection()
    }
    
    func presentHomeScreen() {
        viewController.stopProgress()
        viewController.goToHomeScreen()
    }
}

// MARK: Delegate Protocol

