//
//  RegisterViewController.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 1.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit

class RegisterViewController: BaseViewController {
    
    // MARK: - Outlets
    
    @IBOutlet weak var emailAddressText: CustomTextField!
    @IBOutlet weak var passwordText: CustomTextField!
    @IBOutlet weak var confirmPasswordText: CustomTextField!
    @IBOutlet weak var nameText: CustomTextField!
    @IBOutlet weak var privacyPolicyButton: UIButton!
    @IBOutlet weak var checkBox: CheckBox!
    
    // MARK: - Dependencies
    
    var presenter: RegisterPresenterViewProtocol!
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        
        privacyPolicyButton.setTitleColor(.white, for: .normal)
        
        let termstext = NSAttributedString(string: "terms_and_conditions_text1".localized)
        let termsText2 = NSAttributedString(string: "terms_and_conditions_text2".localized,
                                            attributes: [NSAttributedString.Key.underlineStyle: NSUnderlineStyle.single.rawValue])

        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .left
        
        let combineTermsText = NSAttributedString(format: termstext, attributes: [NSAttributedString.Key.foregroundColor: UIColor.white, NSAttributedString.Key.paragraphStyle: paragraphStyle], args: termsText2)
        
        privacyPolicyButton.setAttributedTitle(combineTermsText, for: .normal)
        
    }
    
    // MARK: - Initialization
    
    // MARK: - Actions
    
    @IBAction func registerButtonTapped(_ sender: Any) {
        guard let name = nameText.text else {
            return
        }
        
        guard let email = emailAddressText.text else {
            return
        }
        
        guard let password = passwordText.attributedText?.string else {
            return
        }
        
        guard let confirmPassword = passwordText.attributedText?.string else {
            return
        }
        
        let checkBoxState = checkBox.isChecked
        
        presenter.fetchResgister(checkBoxStatus: checkBoxState, name: name, email: email, password: password, confirmPassword: confirmPassword)
    }
    
    @IBAction func privacyPolicyButtonTapped(_ sender: Any) {
        if let url = URL(string: "terms_of_use_link".localized) {
            UIApplication.shared.open(url)
        }
    }
    
    @IBAction func closeButtonTapped(_ sender: Any) {
        LoginWireframe().show(transitionType: .root)
    }
}

// MARK: - Extensions

extension RegisterViewController: UITextFieldDelegate  {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case nameText:
            emailAddressText.becomeFirstResponder()
        case emailAddressText:
            passwordText.becomeFirstResponder()
        case passwordText:
            confirmPasswordText.becomeFirstResponder()
        default:
            textField.resignFirstResponder()
        }
        return true
    }
}

// MARK: - Protocol Implemantations

extension RegisterViewController: RegisterViewControllerProtocol {
    
    func completeRegister() {
        
        showPopup(title: "success".localized, message: "message_text.register_completed_and_email_verify_required".localized) { (_) in
            LoginWireframe().show(transitionType: .root)
        }
    }
}
