//
//  RegisterInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 1.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import Foundation

class RegisterInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: RegisterPresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension RegisterInteractor: RegisterInteractorProtocol {
    
    func fetchResgister(name: String, surname: String, email: String, password: String) {
        
        let parameters = RegisterParameter()
        parameters.firstName = name
        parameters.lastName = surname
        parameters.email = email
        parameters.phone = "5550005555"
        parameters.addressDescription = "Develi"
        parameters.lat = "38.388600"
        parameters.lng = "35.492837"
        parameters.password = password
        parameters.confirmPassword = password
        
        let headers = NetworkConstants.contentType
        let parametersJSON = parameters.toDictionary()
        
        networkService.postJSON(url: NetworkConstants.register, parameters: parametersJSON, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
            
            //statusCode => 0: Success, 4: EmailInUse, 5: ValidationError, 500: Unexpected (PhoneNumberInUse??)
            switch statusCode {
            case 0:
                self.presenter.completeRegister()
            case 4:
                self.presenter.handleAndShowError(errorModel: Errors.emailInUse)
            case 5:
                self.presenter.handleAndShowError(errorModel: Errors.validation)
            case 6:
                self.presenter.handleAndShowError(errorModel: Errors.phoneInUse)
            case 500:
                self.presenter.handleAndShowError(errorModel: Errors.unexpected)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
            
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
        
    }
}
