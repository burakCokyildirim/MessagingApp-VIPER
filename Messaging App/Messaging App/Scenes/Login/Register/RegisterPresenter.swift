//
//  RegisterPresenter.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 1.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import Foundation

class RegisterPresenter: BasePresenter {
    
    // MARK: - Dependencies
    
    fileprivate var viewController: RegisterViewControllerProtocol!
    fileprivate var interactor: RegisterInteractorProtocol!
    fileprivate var delegate: RegisterPresenterDelegateProtocol?
    
    // MARK: - Extras
    
    // MARK: - Properties
    
    var name = ""
    var surname = ""
    var email = ""
    var password = ""
    var confirmPassword = ""
    
    // MARK: - Initialization
    
    init(viewController: RegisterViewControllerProtocol, interactor: RegisterInteractorProtocol, delegate: RegisterPresenterDelegateProtocol?, extras: Any?) {
        self.viewController = viewController
        self.interactor = interactor
        self.delegate = delegate
        
        // Store extras
    }
    
    // MARK: - Business Logic
    
    // MARK: - Override
    
    override func handleAndShowError(errorModel: ErrorModel) {
        viewController.stopProgress()
        if handleError(errorModel: errorModel, viewController: viewController) {
            viewController.showError(errorModel: errorModel)
        }
    }
}

// MARK: - Extensions

// MARK: - Protocols Implemantations

// MARK: View Protocol

extension RegisterPresenter: RegisterPresenterViewProtocol {
    
    func fetchResgister(checkBoxStatus: Bool, name: String, email: String, password: String, confirmPassword: String) {
        
        if !checkBoxStatus {
            viewController.showValidationError(errorMessage:
                "warning_checkbox_unchecked".localized)
            return
        }
        
        if name.count == 0 {
            viewController.showValidationError(errorMessage:
                "warning_empty_name".localized)
            return
        }
        
        if email.count == 0 {
            viewController.showValidationError(errorMessage:
                "warning_empty_email".localized)
            return
        }
        
        if password.count == 0 {
            viewController.showValidationError(errorMessage:
                "warning_empty_password".localized)
            return
        }
        
        if password != confirmPassword {
            viewController.showValidationError(errorMessage:
                "warning_notmatch_passwords".localized)
            return
        }
        
        if password.count <= 6 {
            viewController.showValidationError(errorMessage:
                "warning_short_password".localized)
            return
        }
        
        if !email.isValidEmail {
            viewController.showValidationError(errorMessage:
                "warning_wrong_email".localized)
            return
        }
        
        if !name.isValidName {
            viewController.showValidationError(errorMessage:
                "warning_wrong_name".localized)
            return
        }
        
        let fullName = name.split(separator: " ")
        
        guard let surnameSub = fullName.last else {
            return;
        }
        
        let name =  fullName.dropLast().joined(separator: " ")
        let surname = String(surnameSub)
        
        self.name = name
        self.surname = surname
        self.email = email
        self.password = password
        self.confirmPassword = confirmPassword
        
        viewController.startProgress()
        interactor.fetchResgister(name: name, surname: surname, email: email, password: password)
    }
    
    
}

// MARK: Interactor Protocol

extension RegisterPresenter: RegisterPresenterInteractorProtocol {
    
    func completeRegister() {
        
        viewController.stopProgress()
        viewController.completeRegister()
    }
}

// MARK: Delegate Protocol

