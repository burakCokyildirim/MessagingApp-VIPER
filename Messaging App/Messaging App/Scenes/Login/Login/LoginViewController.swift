//
//  LoginViewController.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 1.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit

class LoginViewController: BaseViewController {
    
    // MARK: - Outlets
    
    @IBOutlet weak var emailAddressText: UITextField!
    @IBOutlet weak var passwordText: UITextField!
    @IBOutlet weak var registerButton: UIButton!
    
    // MARK: - Dependencies
    
    var presenter: LoginPresenterViewProtocol!
    
    // MARK: - Properties
    
    private var fieldPossibleAutofillReplacementAt: Date?

    private var fieldPossibleAutofillReplacementRange: NSRange?
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        #if false
        if #available(iOS 13.0, *) {
            DispatchQueue.main.async {
                self.emailAddressText.text = "burak383438@gmail.com"
                self.passwordText.text = "6547818"
                self.loginButtonTapped(self)
            }
        } else {
            DispatchQueue.main.async {
                self.emailAddressText.text = "38burakk@gmail.com"
                self.passwordText.text = "6547818"
                self.loginButtonTapped(self)
            }
        }
        
        #endif
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        
        registerButton.setTitleColor(.white, for: .normal)
        let registertext = NSAttributedString(string: "register_button_text1".localized)
        let registerText2 = NSAttributedString(string: "register_button_text2".localized,
                                            attributes: [NSAttributedString.Key.underlineStyle: NSUnderlineStyle.single.rawValue])

        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .center
        
        let combineRegisterText = NSAttributedString(format: registertext, attributes: [NSAttributedString.Key.foregroundColor: UIColor.white,
                                                                                  NSAttributedString.Key.paragraphStyle: paragraphStyle], args: registerText2)
        registerButton.setAttributedTitle(combineRegisterText, for: .normal)
    }
    
    // MARK: - Initialization
    
    // MARK: - Actions

    @IBAction func loginButtonTapped(_ sender: Any) {
        guard let email = emailAddressText.text else {
            return
        }
        
        guard let password = passwordText.text else {
            return
        }
        
        presenter.fetchLogin(email: email, password: password)
    }
    
    @IBAction func forgetPasswordButtonTapped(_ sender: Any) {
        ForgetPasswordWireframe().show(transitionType: .root)
    }
    
    @IBAction func registerButtonTapped(_ sender: Any) {
        RegisterWireframe().show(transitionType: .root)
    }
}

// MARK: - Extensions

extension LoginViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case emailAddressText:
            passwordText.becomeFirstResponder()
        default:
            textField.resignFirstResponder()
        }
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        // To detect AutoFill, look for two quick replacements. The first replaces a range with a single space
        // (or blank string starting with iOS 13.4).
        // The next replaces the same range with the autofilled content.
        if string == " " || string == "" {
            self.fieldPossibleAutofillReplacementRange = range
            self.fieldPossibleAutofillReplacementAt = Date()
        } else {
            if fieldPossibleAutofillReplacementRange == range, let replacedAt = self.fieldPossibleAutofillReplacementAt, Date().timeIntervalSince(replacedAt) < 0.2 {
                DispatchQueue.main.async {
                    self.resignFirstResponder()
                }
            }
            self.fieldPossibleAutofillReplacementRange = nil
            self.fieldPossibleAutofillReplacementAt = nil
        }

        return true
    }
}

// MARK: - Protocol Implemantations

extension LoginViewController: LoginViewControllerProtocol {
    
    func navigateConfirmationCode(state: ConfirmationViewState) {
        ConfirmationCodeWireframe().show(transitionType: .root, extras: state as Any)
    }
    
    func navigateHomePage() {
        let tabBarController: MainTabBarController = UIStoryboard.main.instantiateViewController()
        BaseWireframe().changeView(transationType: .root, viewController: tabBarController)
    }
}
