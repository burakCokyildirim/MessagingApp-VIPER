//
//  LoginInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 1.03.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import Foundation

class LoginInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: LoginPresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension LoginInteractor: LoginInteractorProtocol {
    
    func fetchLogin(email: String, password: String) {
        let parameters = LoginParameter()
        parameters.email = email
        parameters.password = password
        
        let headers = NetworkConstants.contentType
        let parametersJSON = parameters.toDictionary()
    
        networkService.postJSON(url: NetworkConstants.login, parameters: parametersJSON, headers: headers, success: { (json) in
            guard let statusCode = json["statusCode"].int else {
                self.presenter.handleAndShowError(errorModel: ErrorModel.default)
                return
            }
            
            // statusCode => 0: Success, 1: WrongPassword, 2: EmailActivationRequired, 3: PhoneVerifyRequired, 500: Unexpected
            switch statusCode {
            case 0:
                let loginModel = LoginModel(json: json["data"])
                MessagingAppGlobal.shared.userModel = loginModel.userModel
                self.presenter.presentHomePage()
            case 1:
                self.presenter.handleAndShowError(errorModel: Errors.wrongPassword)
            case 2:
                self.presenter.handleAndShowError(errorModel: Errors.emailActivationRequired)
            case 3:
                self.presenter.presentConfirmationCode(state:
                                                        .step2(phoneNumber: json["data"]["phoneNumber"].stringValue, countryCode: json["data"]["countryCode"].uInt64Value))
            case 4:
                self.presenter.presentConfirmationCode(state: .step1)
            case 5:
                self.presenter.presentConfirmationCode(state: .step3)
                
            case 500:
                self.presenter.handleAndShowError(errorModel: Errors.unexpected)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
            
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
}
