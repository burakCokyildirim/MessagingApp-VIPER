//
//  SettingsInteractor.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 15.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim

import UIKit

class SettingsInteractor: BaseInteractor {
    
    // MARK: - Dependencies
    
    var presenter: SettingsPresenterInteractorProtocol!
    
    // MARK: - Initialization
    
    override init(networkService: NetworkService? = nil, coreDataService: CoreDataService? = nil) {
        super.init(networkService: networkService, coreDataService: coreDataService)
    }
    
    // MARK: - Business Logic

}

// MARK: - Extensions

// MARK: - Protocols Implemantations

extension SettingsInteractor: SettingsInteractorProtocol {
    
    func fetchProfile() {
        let parameters: [String: Any] = ["id": MessagingAppGlobal.shared.userModel?.userID as Any]
        let headers = NetworkConstants.contentType
        
        networkService.postJSON(url: NetworkConstants.profile, parameters: parameters, headers: headers, success: { (json) in
            let statusCode = json["statusCode"].intValue
            
            switch statusCode {
            case 0:
                let user = ProfileModel(json: json["data"])
                self.presenter.showProfile(user)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
            
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func logout() {
        networkService.getJSON(url: NetworkConstants.logout, success: { (json) in
            MessagingAppGlobal.shared.userModel = nil
            self.presenter.presentLogin()
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
    
    func uploadPicture(_ imageData: Data) {
        networkService.upload(url: NetworkConstants.uploadPicture, multipartFormDatas: [(imageData, "profilePicture", "file.jpg", "image/jpg")], success: { (json) in
            let statusCode = json["statusCode"].intValue
            
            switch statusCode {
            case 0:
                self.presenter.reloadView()
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }, failure: { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        })
    }
    
    func changePassword(_ oldPassword: String, _ newPassword: String, _ view: UIView) {
        let parameters: [String: Any] = ["old_password": oldPassword,
                                         "new_password": newPassword,
                                         "new_ConfirmPassword": newPassword]
        let header = NetworkConstants.contentType
        
        networkService.postJSON(url: NetworkConstants.changePassowrd, parameters: parameters, headers: header, success: { (json) in
            let statusCode = json["statusCode"].intValue
            
            switch statusCode {
            case 0:
                self.presenter.dissmissChangePasswordView(view)
            case 5:
                self.presenter.handleAndShowError(errorModel: Errors.wrongPassword)
            default:
                self.presenter.handleAndShowError(errorModel: Errors.somethingsWrong)
            }
        }) { (errorModel) in
            self.presenter.handleAndShowError(errorModel: errorModel)
        }
    }
}
