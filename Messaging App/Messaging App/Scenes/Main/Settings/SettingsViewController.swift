//
//  SettingsViewController.swift
//  Messaging App
//
//  Created by Burak Çokyıldırım on 15.04.2020.
//  Copyright (c) 2020 Softbea. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit

class SettingsViewController: BaseViewController {
    
    // MARK: - Outlets
    
    
    // MARK: - Dependencies
    
    var presenter: SettingsPresenterViewProtocol!
    var tableView: SettingsViewToTableProtocol!
    
    // MARK: - Properties
    
    var imagPickUp : UIImagePickerController!
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        presenter.fetchProfile()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        if !imagPickUp.isBeingPresented {
            navigationController?.popViewController(animated: false)
        }
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        
        barTitle = "settings".localized
        imagPickUp = UIImagePickerController()
        imagPickUp.delegate = self
        imagPickUp.allowsEditing = false
    }
    
    // MARK: - Initialization
    
    // MARK: - Actions
    
    // MARK: - Overrides
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "embedTableSegue" {
            if let tableView = segue.destination as? SettingsTableViewController {
                self.tableView = tableView
                tableView.viewController = self
            }
        }
    }
    
}

// MARK: - Extensions

extension SettingsViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        imagPickUp.dismiss(animated: true) {
            if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
                if let imageData = image.jpegData(compressionQuality: 0.3) {
                    self.presenter.uploadPicture(imageData)
                }
            }
        }
    }
}

// MARK: - Protocol Implemantations

extension SettingsViewController: SettingsViewControllerProtocol {
    
    func showProfile(_ user: ProfileModel) {
        tableView.setUserInfo(user: user)
        MessagingAppGlobal.shared.userModel?.profilePicture = user.profilePicture
    }
    
    func showLogin() {
        LoginWireframe().show(transitionType: .root)
    }
    
    func dissmissChangePasswordView(_ view: UIView) {
        showPopup(title: "success".localized, message: "message_text.change_password_process_success".localized) { (_) in
            view.removeFromSuperview()
        }
    }
}

extension SettingsViewController: SettingsTableToViewProtocol {
    
    func profilePictureCellTapped() {
        let ActionSheet = UIAlertController(title: nil, message: "select_photo".localized, preferredStyle: .actionSheet)

        let cameraPhoto = UIAlertAction(title: "camera".localized, style: .default, handler: {
            (alert: UIAlertAction) -> Void in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.camera){

                self.imagPickUp.mediaTypes = ["public.image"]
                self.imagPickUp.sourceType = UIImagePickerController.SourceType.camera;
                self.present(self.imagPickUp, animated: true, completion: nil)
            }
            else{
                UIAlertController(title: "iOSDevCenter", message: "no_camera_available".localized, preferredStyle: .alert).show(self, sender: nil);
            }

        })

        let PhotoLibrary = UIAlertAction(title: "photo_library".localized, style: .default, handler: {
            (alert: UIAlertAction) -> Void in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary){
                self.imagPickUp.mediaTypes = ["public.image"]
                self.imagPickUp.sourceType = UIImagePickerController.SourceType.photoLibrary;
                self.present(self.imagPickUp, animated: true, completion: nil)
            }

        })

        let cancelAction = UIAlertAction(title: "cancel".localized, style: .cancel, handler: {
            (alert: UIAlertAction) -> Void in

        })

        ActionSheet.addAction(cameraPhoto)
        ActionSheet.addAction(PhotoLibrary)
        ActionSheet.addAction(cancelAction)


        if UIDevice.current.userInterfaceIdiom == .pad {
            let presentC : UIPopoverPresentationController  = ActionSheet.popoverPresentationController!
            presentC.sourceView = self.view
            presentC.sourceRect = self.view.bounds
            self.present(ActionSheet, animated: true, completion: nil)
        }
        else{
            self.present(ActionSheet, animated: true, completion: nil)
        }
    }
    
    func passwordCellTapped() {
        let changePasswordView = ChangePasswordView(delegate: self)
        LetterViewer.keyWindow?.addSubview(changePasswordView)
    }
    
    func logoutCellTapped() {
        presenter.logout()
    }
    
    func privacyPolicyCellTapped() {
        if let url = URL(string: "privacy_policy_link".localized) {
            UIApplication.shared.open(url)
        }
    }
    
    func termsAndConditionsCellTapped() {
        if let url = URL(string: "terms_of_use_link".localized) {
            UIApplication.shared.open(url)
        }
    }
    
    func aboutCellTapped() {
        if let url = URL(string: "https://test.com/") {
            UIApplication.shared.open(url)
        }
    }
}

extension SettingsViewController: ChangePasswordDelegate {
        
    func changeButtonTapped(_ oldPassword: String, _ newPassword: String, _ confirmPassword: String, _ view: UIView) {
        presenter.changePassword(oldPassword, newPassword, confirmPassword, view)
    }
}
